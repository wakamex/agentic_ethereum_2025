Hi everyone, Andrew from the Lit Protocol Devrell team here.

Recently, our team has been working to resolve a pretty crucial issue in the AI agent space, uh, which is how do we trust an agent developer with our agent's wallet? And so we've come up with an interesting solution using the Lit SDK, and that is the Lit Agent wallet.

So, what is Lit's agent wallet? It provides AI agents with immunity to tampering by agent developers. So, this means that the agent owner, whether that be a DAO, multisig, or EOA, can be assured that their agent's funds aren't tampered with by the developer responsible for executing the agent's intents or actions.

So, before we get any further into the explanation, let's quickly cover some terms from the Lit SDK. So, Lit has programmable key pairs or PKPs. Uh, Lit actions are immutable JavaScript code published to the IPFS. And we define a subagent as a GPT-4.0 model that parses an intent, whether from a user or AI, and from that intent correctly selects a Lit action, uh, based tool for the PKP to execute.

Now that we've covered some Lit specific definitions, let's explore how the framework separates the interests of the agent owner and the developer. So we define the agent owner as the admin. The admin is responsible for the ownership of the PKP NFT, and the admin also defines the tools and the policies, um, that restrict these tools. Uh, so for example, if we have a tool to transfer ERC20 tokens from our agent to any other address, we can restrict our agent to only send, uh, permitted tokens to permitted addresses and to transfer a specific amount of each token.

So next is our delegate. Delegates can be thought of as the developers responsible for executing the agent's intent. Their execution scope is limited by the tools and policies defined by the admin, and they must be specifically chosen by the admin to execute the agent's intent. If you are a developer yourself and you are building with an agent framework like Eliza, in this case, you would be the admin and your delegate would be the LLM that Eliza is using.

So this diagram is a pretty granular view of how the framework operates. So we can see that the LLM provides transaction parameters to an executor or developer. Um, that executor or developer provides the transaction parameters and authentication to a specific tool and that specific tool performs signing. Um, so that tool is again a Lit action published to the IPFS. So, it goes to that tool with the correct IPFS CID, uh, and we can see on the bottom right, signs the transaction. But before that, we can see that the admin has delegation and policies.

And so delegation, we have the delegation engine where we delegate specific executors or developers. Uh and then next, after we have successfully added a developer or delegated them, I guess, that's the delegate as we said previously, we have the policies. So it has to verify with this policy to ensure that the parameters passed in by the developer are restricted or I guess within the confines of this policy. And after we pass the policy, we then perform the signing.

So for this project, we have a couple prerequisites. You have to have Nodejs version 18.12 or greater, Git of course to clone the repository, PNPM, um, which can be installed with NPM or yarn, an Ethereum wallet, and for the Ethereum wallet, you will need Lit uh test LPX tokens and you can grab those from the faucet, linked on screen or it'll appear if you just search Lit faucet. And then CLI demo. So, we'll add the package from NPM. Um, the CLI is just a simple demonstration of how you can use the Lit Agent wallet uh package. Uh, kind of the first use case of it. So we'll add the package from NPM and then we'll run the executable Lit Agent wallet. And next we'll go into the demonstration of that. So after installing the AWCLI package, we will run the Lit Agent wallet command and we'll be prompted to select a Lit network. So, these are the three Lit networks for development, free production test and production. Uh, Lit Agent wallets are scoped to these networks. So once you've minted a wallet, it can't be moved across networks. So just please keep that in mind for development.

In this example, we'll be using Datial Dev. We'll start as an admin. It asks us if we would like to manage an existing agent wallet or mint a new one. For the demo, we will mint a new one. And we'll say yes, we would like to manage it. We'll start by going into the tools and we will permit a tool for our wallet. So, the AWCLI demo comes with three tools: ERC20 transfer, a swapping tool, and a signing tool. So we'll just say we'd like to permit the signing tool. We'll then go to delegates. We will first add a delegate. So we'll enter in the address.

And then we're going to go back to the delegates menu and we're going to permit our tool for the delegate. So you can see we select the delegate, we select the tool, and now the tool is permitted. So then we'll go to policies. We'll set the tool policy. So we'll select the tool, our delegate, and then it'll ask us to enter the IPFS CID for the policy. So those can be found in the readme. Um there's a default policy which I will copy paste here. So next we've set the tool policy. So, one last step here, we will go to our policies now. We will set a tool policy parameter for sign ECDSA and then again for our delegate as well. And then we have to enter the parameter name. So, the sign ECDSA tool has one policy attached to it and that is allowed prefixes. So we'll enter that. And then you enter in the type. So the type is an array of strings. So we'll say we allow the prefix hi. Nice. So we have added one policy parameter to our tool. And this is the step where we move to the side of the delegate now.

So next, we'll run the Lit Agent wallet command again from the perspective of the delegate. So again we'll have to select the Datial Dev network where we minted our PKP or agent wallet, of course. Uh, we'll select delegate role and look at our delegated PKPs. So you can see I've used this wallet before because we have three PKPs delegated to it. But the most recent one is the one we just minted with the admin. So we can say get registered tools, select our PKP and as you can see, we have our sign ECDSA tool with the policy enabled. Uh we can also get tool policy. So if we just wanted to see the IPFS CID of that tool policy, we could do that as well.

So finally, we'll go execute tool. We'll go to our agent wallet, sign ECDSA. And as you remember, we set a prefix. So any message we send has to start with that prefix. So we can say hi there. And so we'll execute the tool. And as you can see, we got the signature. Uh sign message success. It signed the message hi there. Again, we can execute the tool, select our PKP, sign ECDSA. But this time we'll say, uh, I will not say hi there. Again, this message doesn't start with the one allowed prefix, which is hi. So we'll try executing this tool. As you can see, there was an error and our error was message must start with one of these prefixes and that prefix is hi. So yeah, that's it for this demonstration. If you have any questions, I recommend you reach out in our Telegram. We have a dedicated channel for questions about the agent wallet. I also recommend taking a look at the API docs. There's a lot of good information there on how you can build with the Lit Agent wallet yourself. And yeah, I hope this demonstration was helpful. Thanks for watching.