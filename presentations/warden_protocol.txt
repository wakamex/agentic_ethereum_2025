Thank you so much for logging into this tutorial. My name is Ali and I am the head of Devrel at Warden Protocols.

Today in this video, I will be talking about Warden Agent Kit. Warden Agent Kit provides developers with tools to create agents with minimal knowledge of Solidity. It simplifies the process of building agents by allowing integration of custom business logic through Solidity smart contracts.

The Warden Agent Kit comes with a ready to use Solidity contract template that automates onchain transactions based on specific conditions. These templates can also be extended for advanced use cases including integration of predictive models.

To make it accessible for web2 developers, the Warden Agent Kit is built with TypeScript enabling seamless integration with familiar tools and workflows. It supports Langchain integration allowing developers to leverage Langchain's extensive suite of tools building and managing agents. All Langchain tools can be integrated further expanding the capabilities of agents built with the kit.

Understanding these components is crucial because they each serve specific purposes in your agent development journey. Starting with the core module, this is the foundation of everything which is available under Warden Protocol agent kit core which you can find as an NPM package.

In this core module, this is where think of this as the engine that powers all your agent operations. This provides the action system, this is where all the blockchain integrations are defined. Each action is carefully typed and validated ensuring you always know what data you are dealing with. So we have for example, get balance to check asset balances, get price for fetching current market prices, send token for execution transfers, create space for managing agent workspaces and many more other operations as you can see over here.

The other core part of the Warden Agent Kit is the Langchain extension. The Langchain extension which can also be downloaded from the NPM package site. Now what makes it special is how you can transform Warden's what makes this extension special is how it transforms Warden's action into Langchain tools. This means your agent can understand natural language commands, they can make intelligent decisions about market conditions and they can explain actions in human readable terms.

The last part that we have out of the box is the integration with X. This module extends your agent's capabilities into social media allowing them to post updates about the operation, monitor market sentiments, engage with community members, share analysis and insights etc. These integrations is particularly powerful because they combine blockchain data and social integrations. What's really cool about this is you can use Langchain's extensive list of providers and integrate them with your agent enhancing the capabilities of your agent.

In the next part of the tutorial, we will be going through a simple tutorial to build a CLI agent. Okay, so in the next part of the tutorial, we are going to clone the. Now if we look into this agent kit, we can find that there is an examples folder where we can find an example template that we have created. This is a simple CLI agent that allows you to interact with the warden chain. Let's look into the code.

All right, so let's begin our dive into the code. This is a simple walkthrough of the CLI agent. As you can see, the code starts by importing necessary dependencies for building the CLI chatbot. This includes scheme ports like Warden Agent Kit for web3 functionalities and then we have got the Warden Agent toolkit which is for Langchain components and then um we have got other variables like .environment to manage the environment variables.

Now the first function that we will walk through is the initialize agent function. Now this does three things. Number one, it creates an open AI instance using a chat GPT model uh which is defined here and then we set up a private key with the environment variables and then we use this private key for web3 transactions.

The next thing that you will see here is the toolkit and the memory management system. Now, again does a couple of things. Number one, it creates a toolkit with web3 capabilities. Um, it then like sets up memories to maintain conversation history. It also like configures the agent with a unique thread ID which we will use later.

And the last thing that this function implements is the react agent creation. Now, this does a couple of things again. One, it creates a react agent combining the language module and tools. Uh the second thing it does is includes memory for conversion persistence and the third thing it does is sets up a message modifier for consistent agent behavior.

The next thing that we will be looking at is the chatbot implementation. Now, we're going to do like a couple of things here. Number one is we're going to do um we're going to like set up the readiness for interface for command line interactions that we'll see in the in the live example that we do and then we also do an interactive loop for the user chat to happen.

And the last thing that we sort of do here is chat loop processing. So this kind of takes care of continuously accepting user response until like exit is entered and then we process each input through the agent um making sure that we stream the responses back to the user.

So in the end, we have a couple of different supporting functions like response handling and error handling. So with response handling, we handle different type of responses. We display the responses in a formatted manner for better reading and then we maintain the conversation flow. And with error handling, we make sure that the orchestration of the entire application flow happens correctly. We implement correct error handling processes and then we ensure a clean exits on error. Uh yeah, and that's that and we can now try to run this function.

All right, so let us look at our agent in action and we can invoke it by simply using NPM start. Um well, the prerequisite for this is of course is you need to install the NPM packages using NPM install and you can find instructions about that in the readme. So once you start the agent, we can see that the agent is running and it is asking you for a prompt. Uh I'm not really sure what type of prompts are available with this agent. So my first question to it will be what type of actions do you support? And um since this is made using Langchain, it can really understand normal English language and it can translate that into um actionable items for us.

So, as you can see, the prompt tells us a couple of things. So we can of course manage spaces, manage keys, key chains, balances, price checks, etc. So all of the different things that are available with the Warden protocol out of the box. So let's try a couple of things. So the first thing that I'm going to do is I'm going to start with managing my spaces. So, what I want to know is how many spaces do I have? And as you can see, um, I have three spaces that I have created. I'll just move this out of the way, sorry. All right, so you can see I have um three spaces available and what I'm going to do is create a new space and then let's see if that space will be seen here.

Okay, so the new space has been created and I'm going to ask it again how many spaces do I have? And hopefully it should return a new space. So yeah, um now previously I had three spaces and now I've got like four spaces under my belt. So yeah, this is a simple example of spaces. We can do other things like we can look at the keys available. So um how many keys do Oh, maybe just let's say uh list all the keys in space ID, let's say the the new space that we created. And hopefully should be zero, right? Because there we have not created any keys yet. But if we ask that how many keys do I have in space ID, let's say 18, um it has keys that were like previously created. So we have got like these two keys that we created. All right, let's see what else can I do? And we should again get a couple of options. Let's choose from that.

The send tokens and then we need um a couple of things, the recipient address, the amount and the key ID. So let's say So, let's say we put in address as this and amount to be 0.01 ETH and let's say the key is 18. All right, this is basically the space ID that we have created. Okay, so yeah, the transaction is successful and we are able to like successfully send some test ETH. Awesome. Thank you so much for logging into this video. Uh hopefully you learned something new. If you have any questions, drop us a line on Discord or reach out to us at developers@wardenprotocol.org. Thank you so much. We're excited to see what you build with Warden Agent Kit. Cheers.